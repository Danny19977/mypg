import { useEffect, useRef, useCallback } from 'react';

export const useGoogleMap = (containerRef, data, userLocation) => {
    const mapRef = useRef(null);
    const markersRef = useRef([]);
    const distanceLineRef = useRef(null);

    const calculateDistance = useCallback((lat1, lon1, lat2, lon2) => {
        const R = 6371; // Radius of the Earth in kilometers
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a = 
            Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
            Math.sin(dLon/2) * Math.sin(dLon/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        const distanceKm = R * c;
        
        if (distanceKm < 1) {
            return `${Math.round(distanceKm * 1000)} m`;
        } else if (distanceKm < 10) {
            return `${distanceKm.toFixed(2)} km`;
        } else {
            return `${distanceKm.toFixed(1)} km`;
        }
    }, []);

    const clearMarkers = useCallback(() => {
        if (markersRef.current) {
            markersRef.current.forEach(({ marker }) => marker.setMap(null));
            markersRef.current = [];
        }
        
        if (distanceLineRef.current) {
            if (distanceLineRef.current.distanceLabel) {
                distanceLineRef.current.distanceLabel.close();
            }
            distanceLineRef.current.setMap(null);
            distanceLineRef.current = null;
        }
    }, []);

    const calculateDistance = useCallback((lat1, lon1, lat2, lon2) => {
        const R = 6371; // Radius of the Earth in kilometers
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a = 
            Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
            Math.sin(dLon/2) * Math.sin(dLon/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        const distanceKm = R * c;
        
        if (distanceKm < 1) {
            return `${Math.round(distanceKm * 1000)} m`;
        } else if (distanceKm < 10) {
            return `${distanceKm.toFixed(2)} km`;
        } else {
            return `${distanceKm.toFixed(1)} km`;
        }
    }, []);

    const clearMarkers = useCallback(() => {
        if (markersRef.current) {
            markersRef.current.forEach(({ marker }) => marker.setMap(null));
            markersRef.current = [];
        }
        
        if (distanceLineRef.current) {
            if (distanceLineRef.current.distanceLabel) {
                distanceLineRef.current.distanceLabel.close();
            }
            distanceLineRef.current.setMap(null);
            distanceLineRef.current = null;
        }
    }, []);

    const createInfoWindowContent = useCallback((item) => {
        // Enhanced debugging
        console.log('Raw item received:', item);
        
        // Log all available properties
        console.log('Available properties:', Object.keys(item));
        
        // Log specific values we're trying to display
        console.log('Form Data Values:', {
            id: item.id,
            text_value: item.text_value,
            email: item.email,
            number_value: item.number_value,
            boolean_value: item.boolean_value,
            comment: item.comment,
            file_url: item.file_url,
            user_name: item.user_name,
            entry_order: item.entry_order,
            area_name: item.area_name,
            province_name: item.province_name,
            created_at: item.created_at,
            data: item.data, // Check if data is nested
            visite_data: item.visite_data // Check if data is under visite_data
        });
        
        // Always get the actual text value for display
        const textValue = item.text_value ? String(item.text_value).trim() : null;
        
        // For status coloring purposes
        const isStatusValue = textValue && ['OUVERT', 'NON', 'OUI'].includes(textValue.toUpperCase());
        const statusColor = isStatusValue ? 
            (textValue.toUpperCase() === 'OUVERT' || textValue.toUpperCase() === 'OUI' ? '#4CAF50' : 
             textValue.toUpperCase() === 'NON' ? '#F44336' : 
             '#757575') : '#757575';
        
        console.log('Status processing:', {
            text_value,
            statusValue,
            statusColor,
            rawTextValue: item.text_value,
            dataTextValue: item.data?.text_value,
            visiteDataTextValue: item.visite_data?.text_value
        });

        console.log('Processing text_value for marker:', {
            raw: item.text_value,
            processed: statusValue,
            color: statusColor
        });

        let distanceText = "";
        if (userLocation && item.latitude && item.longitude) {
            const distance = calculateDistance(
                userLocation.lat, 
                userLocation.lng, 
                parseFloat(item.latitude), 
                parseFloat(item.longitude)
            );
            distanceText = `<tr><td style="padding:2px 0;width:30%;"><strong>Distance:</strong></td><td>${distance}</td></tr>`;
        }

        const images = item.images || [];
        console.log('Debug - Images for marker:', images);

        const createdAt = item.created_at ? 
            (item.created_at.includes('T') ? new Date(item.created_at).toLocaleString() : item.created_at) : 
            'N/A';

        return `
            <div style='min-width:380px; max-width:520px;'>
                <div class="marker-details" style="padding: 10px;">
                    <!-- Status Badge -->
                    ${statusValue ? `
                        <div style="
                            padding: 4px 8px;
                            border-radius: 4px;
                            margin-bottom: 10px;
                            text-align: center;
                            font-weight: bold;
                            background-color: ${statusColor};
                            color: white;">
                            ${statusValue}
                        </div>
                    ` : ''}

                    <!-- Details Section -->
                    <div style="border: 1px solid #dee2e6; border-radius: 4px; margin-bottom: 15px;">
                        <!-- Details Header -->
                        <div onclick="
                            const content = this.nextElementSibling;
                            const arrow = this.querySelector('.expand-arrow');
                            if (content.style.maxHeight) {
                                content.style.maxHeight = null;
                                arrow.innerHTML = '‚ñº';
                            } else {
                                content.style.maxHeight = '500px';
                                arrow.innerHTML = '‚ñ≤';
                            }"
                            style="padding: 8px; background-color: #f8f9fa; cursor: pointer; display: flex; justify-content: space-between; align-items: center;">
                            <span>üìù Details</span>
                            <span class="expand-arrow">‚ñº</span>
                        </div>

                        <!-- Details Content -->
                        <div style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease-out;">
                            <!-- Form Data -->
                            ${[
                                { label: 'Text Value', value: textValue, icon: '‚úçÔ∏è' },
                                { label: 'Email', value: getData('email'), icon: 'üìß' },
                                { label: 'Number Value', value: getData('number_value'), icon: 'üî¢' },
                                { label: 'Boolean Value', value: getData('boolean_value') !== undefined ? (getData('boolean_value') ? 'Yes' : 'No') : null, icon: '‚úì' },
                                { label: 'Comment', value: getData('comment'), icon: 'üí≠' }
                            ].filter(field => field.value !== null && field.value !== undefined)
                                .map(field => `
                                    <div style="padding: 8px; border-top: 1px solid #dee2e6;">
                                        <div style="font-weight: bold; margin-right: 8px;">
                                            ${field.icon} ${field.label}:
                                        </div>
                                        <div style="margin-top: 4px; color: #2c3e50;">
                                            ${field.value}
                                        </div>
                                    </div>
                                `).join('')}

                            <!-- Attachments -->
                            ${item.file_url ? `
                                <div style="padding: 8px; border-top: 1px solid #dee2e6;">
                                    <div style="font-weight: bold; margin-bottom: 4px;">
                                        üìé Attachments:
                                    </div>
                                    ${Array.isArray(item.file_url) 
                                        ? item.file_url.map(url => `
                                            <a href="${url}" target="_blank" style="display: block; color: #4a90e2; text-decoration: none; margin: 4px 0;">
                                                <span style="margin-right: 8px;">üìÑ</span> View Attachment
                                            </a>
                                        `).join('')
                                        : `
                                            <a href="${item.file_url}" target="_blank" style="display: block; color: #4a90e2; text-decoration: none;">
                                                <span style="margin-right: 8px;">üìÑ</span> View Attachment
                                            </a>
                                        `}
                                </div>
                            ` : ''}
                        </div>
                    </div>

                    ${images.length > 0 ? `
                        <div style="margin: -8px -8px 15px -8px;">
                            <div style="display: flex; overflow-x: auto; gap: 8px; padding: 8px; background: #f8f9fa;">
                            ${images.map(url => `
                                <div style="flex: 0 0 auto; position: relative;">
                                    <img src="${url}" 
                                         alt="Visit Image" 
                                         style="height: 200px; object-fit: contain; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"
                                         onerror="this.parentElement.style.display='none';">
                                </div>
                            `).join('')}
                        </div>
                        <div style="text-align: center; margin-top: 8px; font-size: 12px; color: #666;">
                            <span>${images.length} image${images.length !== 1 ? 's' : ''}</span>
                        </div>
                    </div>
                ` : ''}

                <div class="info-header" style="margin-bottom:15px; text-align:center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px; border-radius: 8px; margin: ${images.length > 0 ? '0' : '-8px -8px 15px -8px'};">
                    <h4 style="color:white; margin:0; font-size: 16px;">üìç Visit Entry #${item.id}</h4>
                    <span style="color:#e8e8e8; font-size:13px;">${item.visite_harder_uuid || 'Unknown UUID'}</span>
                </div>

                ${statusValue ? `
                    <div style="margin-bottom: 15px; text-align: center;">
                        <div style="font-size: 13px; color: #666; margin-bottom: 8px;">
                            üîµ Status:
                        </div>
                        <div style="
                            display: inline-block;
                            padding: 6px 12px;
                            border-radius: 16px;
                            background-color: ${statusColor};
                            color: white;
                            font-weight: 500;
                            text-transform: uppercase;
                            font-size: 12px;
                            letter-spacing: 0.5px;">
                            ${statusValue}
                        </div>
                    </div>
                ` : ''}

                <div style="max-height:400px; overflow-y:auto;">
                    <div style="margin-bottom: 15px;">
                        <!-- Main Details Button -->
                        <div onclick="
                            const detailsContent = this.nextElementSibling;
                            const arrow = this.querySelector('.arrow');
                            if(detailsContent.style.maxHeight) {
                                detailsContent.style.maxHeight = null;
                                arrow.innerHTML = '‚ñº';
                            } else {
                                detailsContent.style.maxHeight = detailsContent.scrollHeight + 'px';
                                arrow.innerHTML = '‚ñ≤';
                            }"
                            style="cursor: pointer; padding: 10px; background: #f8f9fa; border-radius: 8px; display: flex; justify-content: space-between; align-items: center; margin-bottom: 2px;">
                            <h5 style="margin: 0; color: #2c3e50; font-size: 14px;">
                                üìù Details <span style="color: #666; font-size: 12px;">(click to expand)</span>
                            </h5>
                            <span class="arrow" style="color: #667eea; font-size: 12px;">‚ñº</span>
                        </div>

                        <!-- Expandable Content -->
                        <div style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease-out;">
                            <div style="border: 1px solid #e9ecef; border-radius: 8px; padding: 15px; margin-top: 5px;">
                                <!-- Form Submission Data -->
                                <div style="display: grid; gap: 12px;">
                                    ${[
                                        { label: 'Text Value', value: item.text_value, icon: '‚úçÔ∏è' },
                                        { label: 'Email', value: item.email, icon: 'üìß' },
                                        { label: 'Number Value', value: item.number_value, icon: 'üî¢' },
                                        { label: 'Boolean Value', value: item.boolean_value !== undefined ? (item.boolean_value ? 'Yes' : 'No') : null, icon: '‚úì' },
                                        { label: 'Comment', value: item.comment, icon: 'üí≠' }
                                    ].filter(field => field.value !== null && field.value !== undefined)
                                        .map(field => `
                                            <div style="background: #f8f9fa; padding: 10px; border-radius: 6px;">
                                                <div style="color: #666; font-size: 12px; margin-bottom: 4px;">
                                                    ${field.icon} ${field.label}:
                                                </div>
                                                <div style="color: #2c3e50; font-size: 13px;">
                                                    ${String(field.value)}
                                                </div>
                                            </div>
                                        `).join('')}

                                    ${item.file_url ? `
                                        <div style="background: #f8f9fa; padding: 10px; border-radius: 6px;">
                                            <div style="color: #666; font-size: 12px; margin-bottom: 4px;">
                                                üìé Attachments:
                                            </div>
                                            <div>
                                                ${Array.isArray(item.file_url) 
                                                    ? item.file_url.map(url => `
                                                        <a href="${url}" target="_blank" style="display: block; color: #667eea; text-decoration: none; font-size: 13px; margin: 4px 0;">
                                                            <span style="margin-right: 8px;">üìÑ</span> View Attachment
                                                        </a>
                                                    `).join('')
                                                    : `
                                                        <a href="${item.file_url}" target="_blank" style="display: block; color: #667eea; text-decoration: none; font-size: 13px;">
                                                            <span style="margin-right: 8px;">üìÑ</span> View Attachment
                                                        </a>
                                                    `}
                                            </div>
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Basic Info Table -->
                    <table style="width:100%;margin:8px 0;border-collapse:collapse; margin-bottom:15px; font-size: 13px;">
                        <tr><td style="padding:4px 0;width:35%;"><strong>üìç Coordinates:</strong></td><td>${parseFloat(item.latitude).toFixed(6)}, ${parseFloat(item.longitude).toFixed(6)}</td></tr>
                        ${distanceText}
                        <tr><td style="padding:4px 0;"><strong>üìÖ Created:</strong></td><td>${createdAt}</td></tr>
                        <tr><td style="padding:4px 0;"><strong>üî¢ Entry Order:</strong></td><td>${item.entry_order || 'N/A'}</td></tr>
                    </table>

                    <!-- Location Info Grid -->
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 12px;">
                        <div style="padding:6px; background:#f8f9fa; border-radius:4px;">
                            <strong>üë§ User:</strong><br/>
                            <span style="color:#666;">${item.user_name || 'N/A'}</span>
                        </div>
                        <div style="padding:6px; background:#f8f9fa; border-radius:4px;">
                            <strong>üìß Email:</strong><br/>
                            <span style="color:#666;">${item.email || 'N/A'}</span>
                        </div>
                        <div style="padding:6px; background:#f8f9fa; border-radius:4px;">
                            <strong>üìç Area:</strong><br/>
                            <span style="color:#666;">${item.area_name || 'N/A'}</span>
                        </div>
                        <div style="padding:6px; background:#f8f9fa; border-radius:4px;">
                            <strong>üåé Province:</strong><br/>
                            <span style="color:#666;">${item.province_name || 'N/A'}</span>
                        </div>
                    </div>
                </div>

                <div style="margin-top:15px;display:flex;justify-content:space-between;align-items:center;">
                    <a href="https://www.google.com/maps/dir/?api=1&destination=${item.latitude},${item.longitude}" 
                       target="_blank" 
                       style="display:inline-block;background:#4285F4;color:white;padding:10px 16px;border-radius:6px;text-decoration:none;font-size:13px;font-weight:600;box-shadow:0 2px 4px rgba(66,133,244,0.3);transition:all 0.2s;">
                       <span style="margin-right:6px;">üß≠</span> Get Directions
                    </a>
                    <small style="color:#666; font-size: 11px;">
                        Visit ID: ${item.visite_harder_uuid ? item.visite_harder_uuid.substring(0, 8) + '...' : 'N/A'}
                    </small>
                </div>

                <!-- Basic Info -->
                <div style="margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px;">
                    <table style="width:100%; border-collapse:collapse; font-size: 13px;">
                        <tr>
                            <td style="padding:4px 0;width:35%;"><strong>üìç Coordinates:</strong></td>
                            <td>${parseFloat(item.latitude).toFixed(6)}, ${parseFloat(item.longitude).toFixed(6)}</td>
                        </tr>
                        ${distanceText}
                        <tr>
                            <td style="padding:4px 0;"><strong>üìÖ Created:</strong></td>
                            <td>${createdAt}</td>
                        </tr>
                        <tr>
                            <td style="padding:4px 0;"><strong>üî¢ Entry Order:</strong></td>
                            <td>${item.entry_order || 'N/A'}</td>
                        </tr>
                    </table>
                </div>
            </div>
        `;
    }, [userLocation, calculateDistance]);

    const createMarkers = useCallback(() => {
        if (!mapRef.current || !window.google) return;

        console.log("üó∫Ô∏è Starting marker creation...");
        clearMarkers();
        
        const google = window.google;
        const bounds = new google.maps.LatLngBounds();

        const validData = data.filter(item => 
            item.latitude !== null && 
            item.longitude !== null && 
            !isNaN(parseFloat(item.latitude)) && 
            !isNaN(parseFloat(item.longitude))
        );

        if (validData.length === 0) {
            console.log("üó∫Ô∏è No valid data points to display");
            return;
        }

        console.log(`üó∫Ô∏è Creating ${validData.length} markers`);

        validData.forEach(item => {
            const lat = parseFloat(item.latitude);
            const lng = parseFloat(item.longitude);
            
            bounds.extend(new google.maps.LatLng(lat, lng));
            
            const statusValue = item.text_value ? String(item.text_value).trim().toUpperCase() : null;
            const markerColor = statusValue === 'OUVERT' ? '#4CAF50' : 
                              statusValue === 'NON' ? '#F44336' : 
                              '#757575';

            const marker = new google.maps.Marker({
                position: { lat, lng },
                map: mapRef.current,
                animation: google.maps.Animation.DROP,
                icon: {
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: 12,
                    fillColor: markerColor,
                    fillOpacity: 0.9,
                    strokeColor: '#ffffff',
                    strokeWeight: 2
                }
            });

            const infoContent = createInfoWindowContent(item);
            const infoWindow = new google.maps.InfoWindow({ content: infoContent });
            
            marker.addListener("click", () => {
                infoWindow.open(mapRef.current, marker);
                
                if (userLocation && distanceLineRef.current) {
                    if (distanceLineRef.current.distanceLabel) {
                        distanceLineRef.current.distanceLabel.close();
                    }
                    distanceLineRef.current.setMap(null);
                }
                
                if (userLocation) {
                    const lineCoordinates = [
                        { lat: userLocation.lat, lng: userLocation.lng },
                        { lat, lng }
                    ];

                    distanceLineRef.current = new google.maps.Polyline({
                        path: lineCoordinates,
                        geodesic: true,
                        strokeColor: '#FF0000',
                        strokeOpacity: 0.8,
                        strokeWeight: 2,
                        map: mapRef.current
                    });

                    const distance = calculateDistance(userLocation.lat, userLocation.lng, lat, lng);
                    const midpoint = {
                        lat: (userLocation.lat + lat) / 2,
                        lng: (userLocation.lng + lng) / 2
                    };

                    distanceLineRef.current.distanceLabel = new google.maps.InfoWindow({
                        content: `<div style="font-weight: bold; color: #FF0000;">${distance}</div>`,
                        position: midpoint
                    });

                    distanceLineRef.current.distanceLabel.open(mapRef.current);
                }
            });

            markersRef.current.push({ marker, data: item });
        });

        mapRef.current.fitBounds(bounds);
        google.maps.event.addListenerOnce(mapRef.current, "bounds_changed", () => {
            if (mapRef.current.getZoom() > 15) {
                mapRef.current.setZoom(15);
            }
        });
    }, [data, userLocation, calculateDistance, clearMarkers, createInfoWindowContent]);

    const initializeMap = useCallback(() => {
        if (!containerRef.current || !window.google) return;

        console.log("üó∫Ô∏è Initializing Google Map...");
        const google = window.google;
        const defaultCenter = data.length > 0 && data[0].latitude && data[0].longitude
            ? { lat: parseFloat(data[0].latitude), lng: parseFloat(data[0].longitude) }
            : { lat: 0, lng: 0 };

        mapRef.current = new google.maps.Map(containerRef.current, {
            zoom: 10,
            center: defaultCenter,
            zoomControl: true,
            mapTypeControl: true,
            scaleControl: true,
            streetViewControl: true,
            rotateControl: true,
            fullscreenControl: true,
            gestureHandling: 'greedy'
        });

        mapRef.current.addListener("click", () => {
            if (distanceLineRef.current) {
                if (distanceLineRef.current.distanceLabel) {
                    distanceLineRef.current.distanceLabel.close();
                }
                distanceLineRef.current.setMap(null);
                distanceLineRef.current = null;
            }
        });

        console.log("‚úÖ Google Map initialized");
    }, [data]);

    useEffect(() => {
        if (window.google) {
            initializeMap();
        }
    }, [initializeMap]);

    useEffect(() => {
        if (mapRef.current) {
            createMarkers();
        }
    }, [createMarkers]);

    return { mapRef, clearMarkers };
};